" functions
function! s:map_sexp_wrap(type, target, left, right, pos)
  execute (a:type ==# 'v' ? 'x' : 'n').'noremap'
        \ '<buffer><silent>' a:target ':<C-U>let b:sexp_count = v:count<Bar>exe "normal! m`"<Bar>'
        \ . 'call sexp#wrap("'.a:type.'", "'.a:left.'", "'.a:right.'", '.a:pos.', 0)'
        \ . '<Bar>silent! call repeat#set("'.a:target.'", v:count)<CR>'
endfunction

function! s:sexp_mappings()
    xmap <silent><buffer> af <Plug>(sexp_outer_list)
    omap <silent><buffer> af <Plug>(sexp_outer_list)
    xmap <silent><buffer> if <Plug>(sexp_inner_list)
    omap <silent><buffer> if <Plug>(sexp_inner_list)
    xmap <silent><buffer> aF <Plug>(sexp_outer_top_list)
    omap <silent><buffer> aF <Plug>(sexp_outer_top_list)
    xmap <silent><buffer> iF <Plug>(sexp_inner_top_list)
    omap <silent><buffer> iF <Plug>(sexp_inner_top_list)
    " xmap <silent><buffer> as <Plug>(sexp_outer_string)
    " omap <silent><buffer> as <Plug>(sexp_outer_string)
    " xmap <silent><buffer> is <Plug>(sexp_inner_string)
    " omap <silent><buffer> is <Plug>(sexp_inner_string)
    xmap <silent><buffer> ae <Plug>(sexp_outer_element)
    omap <silent><buffer> ae <Plug>(sexp_outer_element)
    xmap <silent><buffer> ie <Plug>(sexp_inner_element)
    omap <silent><buffer> ie <Plug>(sexp_inner_element)

    nmap <buffer> (  <Plug>(sexp_move_to_prev_bracket)
    omap <buffer> (  <Plug>(sexp_move_to_prev_bracket)
    xmap <buffer> (  <Plug>(sexp_move_to_prev_bracket)
    nmap <buffer> )  <Plug>(sexp_move_to_next_bracket)
    omap <buffer> )  <Plug>(sexp_move_to_next_bracket)
    xmap <buffer> )  <Plug>(sexp_move_to_next_bracket)
    nmap <buffer> B  <Plug>(sexp_move_to_prev_element_head)
    xmap <buffer> B  <Plug>(sexp_move_to_prev_element_head)
    omap <buffer> B  <Plug>(sexp_move_to_prev_element_head)
    nmap <buffer> W  <Plug>(sexp_move_to_next_element_head)
    xmap <buffer> W  <Plug>(sexp_move_to_next_element_head)
    omap <buffer> W  <Plug>(sexp_move_to_next_element_head)
    nmap <buffer> gE <Plug>(sexp_move_to_prev_element_tail)
    xmap <buffer> gE <Plug>(sexp_move_to_prev_element_tail)
    omap <buffer> gE <Plug>(sexp_move_to_prev_element_tail)
    nmap <buffer> E  <Plug>(sexp_move_to_next_element_tail)
    xmap <buffer> E  <Plug>(sexp_move_to_next_element_tail)
    omap <buffer> E  <Plug>(sexp_move_to_next_element_tail)
    nmap <buffer> [[ <Plug>(sexp_move_to_prev_top_element)
    xmap <buffer> [[ <Plug>(sexp_move_to_prev_top_element)
    omap <buffer> [[ <Plug>(sexp_move_to_prev_top_element)
    nmap <buffer> ]] <Plug>(sexp_move_to_next_top_element)
    xmap <buffer> ]] <Plug>(sexp_move_to_next_top_element)
    omap <buffer> ]] <Plug>(sexp_move_to_next_top_element)

    nmap <buffer> [e <Plug>(sexp_select_prev_element)
    xmap <buffer> [e <Plug>(sexp_select_prev_element)
    omap <buffer> [e <Plug>(sexp_select_prev_element)
    nmap <buffer> ]e <Plug>(sexp_select_next_element)
    xmap <buffer> ]e <Plug>(sexp_select_next_element)
    omap <buffer> ]e <Plug>(sexp_select_next_element)
    nmap <buffer> == <Plug>(sexp_indent)
    nmap <buffer> =- <Plug>(sexp_indent_top)

    " nmap <buffer> <localleader>i <Plug>(sexp_round_head_wrap_list)
    " xmap <buffer> <localleader>i <Plug>(sexp_round_head_wrap_list)
    " nmap <buffer> <localleader>I <Plug>(sexp_round_tail_wrap_list)
    " xmap <buffer> <localleader>I <Plug>(sexp_round_tail_wrap_list)
    " nmap <buffer> <localleader>[ <Plug>(sexp_square_head_wrap_list)
    " xmap <buffer> <localleader>[ <Plug>(sexp_square_head_wrap_list)
    " nmap <buffer> <localleader>] <Plug>(sexp_square_tail_wrap_list)
    " xmap <buffer> <localleader>] <Plug>(sexp_square_tail_wrap_list)
    " nmap <buffer> <localleader>{ <Plug>(sexp_curly_head_wrap_list)
    " xmap <buffer> <localleader>{ <Plug>(sexp_curly_head_wrap_list)
    " nmap <buffer> <localleader>} <Plug>(sexp_curly_tail_wrap_list)
    " xmap <buffer> <localleader>} <Plug>(sexp_curly_tail_wrap_list)

    " nmap <buffer> <localleader>w  <Plug>(sexp_round_head_wrap_element)
    " xmap <buffer> <localleader>w  <Plug>(sexp_round_head_wrap_element)
    " nmap <buffer> <localleader>W  <Plug>(sexp_round_tail_wrap_element)
    " xmap <buffer> <localleader>W  <Plug>(sexp_round_tail_wrap_element)
    " nmap <buffer> <localleader>e[ <Plug>(sexp_square_head_wrap_element)
    " xmap <buffer> <localleader>e[ <Plug>(sexp_square_head_wrap_element)
    " nmap <buffer> <localleader>e] <Plug>(sexp_square_tail_wrap_element)
    " xmap <buffer> <localleader>e] <Plug>(sexp_square_tail_wrap_element)
    " nmap <buffer> <localleader>e{ <Plug>(sexp_curly_head_wrap_element)
    " xmap <buffer> <localleader>e{ <Plug>(sexp_curly_head_wrap_element)
    " nmap <buffer> <localleader>e} <Plug>(sexp_curly_tail_wrap_element)
    " xmap <buffer> <localleader>e} <Plug>(sexp_curly_tail_wrap_element)
    nmap <buffer> dsf <Plug>(sexp_splice_list)

    nmap <buffer> <i <Plug>(sexp_insert_at_list_head)
    nmap <buffer> >i <Plug>(sexp_insert_at_list_tail)
    nmap <buffer> <f <Plug>(sexp_swap_list_backward)
    xmap <buffer> <f <Plug>(sexp_swap_list_backward)
    nmap <buffer> >f <Plug>(sexp_swap_list_forward)
    xmap <buffer> >f <Plug>(sexp_swap_list_forward)
    nmap <buffer> <e <Plug>(sexp_swap_element_backward)
    xmap <buffer> <e <Plug>(sexp_swap_element_backward)
    nmap <buffer> >e <Plug>(sexp_swap_element_forward)
    xmap <buffer> >e <Plug>(sexp_swap_element_forward)
    nmap <buffer> >( <Plug>(sexp_emit_head_element)
    xmap <buffer> >( <Plug>(sexp_emit_head_element)
    nmap <buffer> <) <Plug>(sexp_emit_tail_element)
    xmap <buffer> <) <Plug>(sexp_emit_tail_element)
    nmap <buffer> <( <Plug>(sexp_capture_prev_element)
    xmap <buffer> <( <Plug>(sexp_capture_prev_element)
    nmap <buffer> >) <Plug>(sexp_capture_next_element)
    xmap <buffer> >) <Plug>(sexp_capture_next_element)

    imap <buffer> <bs> <Plug>(sexp_insert_backspace)
    imap <buffer> "    <Plug>(sexp_insert_double_quote)
    imap <buffer> (    <Plug>(sexp_insert_opening_round)
    imap <buffer> )    <Plug>(sexp_insert_closing_round)
    imap <buffer> [    <Plug>(sexp_insert_opening_square)
    imap <buffer> ]    <Plug>(sexp_insert_closing_square)
    imap <buffer> {    <Plug>(sexp_insert_opening_curly)
    imap <buffer> }    <Plug>(sexp_insert_closing_curly)

    call s:map_sexp_wrap('e', 'yseb', '(', ')', 0)
    call s:map_sexp_wrap('e', 'yse(', '(', ')', 0)
    call s:map_sexp_wrap('e', 'yse)', '(', ')', 1)
    call s:map_sexp_wrap('e', 'yse[', '[', ']', 0)
    call s:map_sexp_wrap('e', 'yse]', '[', ']', 1)
    call s:map_sexp_wrap('e', 'yse{', '{', '}', 0)
    call s:map_sexp_wrap('e', 'yse}', '{', '}', 1)
endfunction

" options
let g:sexp_filetypes = ''

" autocmds
augroup sexp
    autocmd!
    autocmd FileType clojure,scheme,lisp,timl call s:sexp_mappings()
augroup END
