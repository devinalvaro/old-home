# Use Google formatting style
--style=google

# Use 4 spaces for indentation
--indent=spaces=4
--convert-tabs

# Indent class and struct blocks so that the blocks 'public', 'private' and
# 'protected' are indented.
--indent-classes

# Indent 'switch' blocks so that the 'case X:' statements are indented with
# the switch block. The entire case block is indented.
--indent-switches

# Add extra indentation to namespace blocks.
--indent-namespaces

# Indent multi line preprocessor definitions ending with a backslash
--indent-preprocessor

# Indent C++ comments beginning in column one.
--indent-col1-comments

# Pad empty lines around header blocks (e.g. 'if', 'for', 'while'...).
--break-blocks

# Closing brackets is broken into their own lines
# --break-closing-brackets

# Line does not exceed 80 chars
--max-code-length=80
--break-after-logical

# One liners get brackets
--add-brackets

# Insert space padding around operators. Any end of line comments will remain
# in the original column, if possible. Note that there is no option to unpad.
--pad-oper

# Insert space padding after paren headers only (e.g. 'if', 'for', 'while'...).
# Any end of line comments will remain in the original column, if possible.
# This can be used with unpad-paren to remove unwanted spaces.
--pad-header

# Remove extra space padding around parenthesis on the inside and outside. Any
# end of line comments will remain in the original column, if possible. This
# option can be used in combination with the paren padding options pad‑paren,
# pad‑paren‑out, pad‑paren‑in, and pad‑header above. Only padding that has not
# been requested by other options will be removed.
--unpad-paren

# Delete empty lines within a function or method. Empty lines outside of
# functions or methods are NOT deleted. If used with break-blocks or
# break-blocks=all it will delete all lines EXCEPT the lines added by the
# break-blocks options.
--delete-empty-lines

# Attach a pointer or reference operator (* or &) to either the variable type
# (left) or variable name (right), or place it between the type and name
# (middle). The spacing between the type and name will be preserved, if
# possible. To format references separately use the following align-reference
# option.
--align-pointer=name

# Set the minimal indent that is added when a header is built of multiple
# lines. This indent helps to easily separate the header from the command
# statements that follow. The value for # indicates a number of indents and is
# a minimum value. The indent may be greater to align with the data on the
# previous line.
# The valid values are:
# 0 - no minimal indent. The lines will be aligned with the paren on the
# 	preceding line.
# 1 - indent at least one additional indent.
# 2 - indent at least two additional indents.
# 3 - indent at least one-half an additional indent. This is intended for 
# large indents (e.g. 8).
--min-conditional-indent=2

# Do not create .orig backup file
--suffix=none
